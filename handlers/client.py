from aiogram import types, Dispatcher
from keyboards import sis_ad, python, alg_log, vr_ar, cyber, menu, fields, podacha
from create import bot, dp
from groups import raspisanie


data = dict()
INFO = '''
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ IT-–∫—É–±. –¢–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑—ã –ø—Ä–æ—â–µ!
–û—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—à—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –ø—Ä–∏–µ—Ö–∞—Ç—å —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫ –Ω–∞–º!üòÄ/menu , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!'''


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('f_'))
async def fields2(c: types.CallbackQuery):
    global data
    field = c.data[-2:]
    if field == 'sa':
        info = open('documents/sis.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=sis_ad)
    elif field == 'py':
        info = open('documents/pyth.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=python)
    elif field == 'al':
        info = open('documents/alg.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=alg_log)
    elif field == 'vr':
        info = open('documents/vr.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=vr_ar)
    elif field == 'it':
        await bot.send_message(c.from_user.id, text='–°–∞–º—Å—É–Ω–≥')
    elif field == 'it':
        await bot.send_message(c.from_user.id, text='–†–æ–±–æ—Ç—ã')
    elif field == 'cb':
        info = open('documents/cybergig.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=cyber)
    data[c.from_user.id] = dict()
    await bot.answer_callback_query(c.id)


# @dp.callback_query_handler(lambda c: c.data == 'zayava')
async def zayava(c: types.CallbackQuery):
    doc = open('../documents/byudzhet-kub.docx', 'rb')
    await bot.send_document(chat_id=c.from_user.id, document=doc)
    await bot.answer_callback_query(c.id)


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('r_'))
async def schedule(c: types.CallbackQuery):
    global data
    url_end = c.data[2:]
    inf_table = raspisanie(url_end)
    if url_end == '/sistemnoe-administrirovanie/':
        data[c.from_user.id]['napravlenie'] = '—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
    elif url_end == '/programmirovanie-na-python-litsey-akademii-yandeksa/':
        data[c.from_user.id]['napravlenie'] = '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python (–õ–∏—Ü–µ–π –ê–∫–∞–¥–µ–º–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞)'
    elif url_end == '/mobilnaya-razrabotka-it-shkola-samsung/':
        data[c.from_user.id]['napravlenie'] = '–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (IT —à–∫–æ–ª–∞ SAMSUNG)'
    elif url_end == '/razrabotka-vr-ar-prilozheniy/':
        data[c.from_user.id]['napravlenie'] = '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ VR/AR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'
    elif url_end == '/kibergigiena-i-rabota-s-bolshimi-dannymi/':
        data[c.from_user.id]['napravlenie'] = '–∫–∏–±–µ—Ä–≥–∏–≥–∏–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
    elif url_end == '/programmirovanie-robotov/':
        data[c.from_user.id]['napravlenie'] = '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–≤'
    elif url_end == '/osnovy-algoritmiki-i-logiki/':
        data[c.from_user.id]['napravlenie'] = '–æ—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏ –∏ –ª–æ–≥–∏–∫–∏'
    table = types.InlineKeyboardMarkup(row_width=3)
    for i in inf_table:
        table.insert(types.InlineKeyboardButton(text=i[0], callback_data='g_' + i[1]))
    await bot.send_message(c.from_user.id, text='–ì—Ä—É–ø–ø—ã:', reply_markup=table)


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('g_'))
async def group(c: types.CallbackQuery):
    await bot.send_message(c.from_user.id, text='')


# @dp.message_handler(commands='start')
async def start(m: types.Message):
    time = int(m.date.hour)
    if time in range(5, 13):
        hello = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!'
    elif time in range(13, 18):
        hello = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!'
    elif time in range(18, 23):
        hello = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!'
    else:
        hello = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!'
    photo = open('photos/itcube.jpg', 'rb')
    await bot.send_photo(m.chat.id, photo, hello + ' ' + INFO, reply_markup=menu)


# @dp.message_handler(lambda m: m.text == '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µüéì')
async def field(m: types.Message):
    await m.answer('–í—ã–±–∏—Ä–∞–µ–º!', reply_markup=fields)


# @dp.message_handler(lambda m: m.text == '–û—Ç–º–µ–Ω–∞‚ùå')
async def close(m: types.Message):
    remove = types.ReplyKeyboardRemove()
    await m.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=remove)


# dp.message_handler(lambda m: m.text == '–ü–æ—Å—Ç—É–ø–∏—Ç—å –≤ IT-–∫—É–±!')
async def podacha_zayavki(m: types.Message):
    await m.answer('–í—ã –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–∞—Ö –æ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!!!!', reply_markup=podacha)


def reg_client_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(fields2, lambda c: c.data and c.data.startswith('f_'))
    dp.register_callback_query_handler(schedule, lambda c: c.data and c.data.startswith('r_'))
    # dp.register_callback_query_handler(zayava, lambda c: c.data == 'zayava')
    dp.register_message_handler(start, commands='start')
    dp.register_message_handler(field, lambda m: m.text == '–£–∑–Ω–∞—Ç—å –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Öüéì')
    dp.register_message_handler(podacha_zayavki, lambda m: m.text == '–ü–æ—Å—Ç—É–ø–∏—Ç—å –≤ IT-–∫—É–±!')
    dp.register_message_handler(close, lambda m: m.text == '–û—Ç–º–µ–Ω–∞‚ùå')
